#include "thingProperties.h"
#include "CircularBuffer.hpp"

#define buf_length 1000
CircularBuffer<int, buf_length> rms_buffer;


/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bb0d6d83-f3cb-4211-a287-b0536db13b9d 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float pow0;
  float pow1;
  float pow2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/




float a0 = 0;
float a1 = 0;
float a2 = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  //setup input and output pins
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  pinMode(D7, OUTPUT);


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}


float getRMSAmps(int a_pin){
  float rms_a = 0;
  //rapidly capture a couple hundred points of analog data
  //convert it to RMS
  //Convert that from volts on the analog signal to amps
  
  // clear the buffer
  for (int k=0; k<buf_length; k++){
    rms_buffer.push(0);
  }
  // cycle was measured to take 278 ms for the total read length.
  // int ts = millis();
  for (int k=0; k<buf_length; k++){
    rms_buffer.push(analogReadMilliVolts(a_pin) - 1317);
    delayMicroseconds(200);
  }
  // Serial.println(millis()-ts);


  long sum = 0;
  for (int k=0; k<buf_length; k++){
    sum += pow(rms_buffer[k], 2);
  }
  sum = sum/buf_length;

  float rms_v = 0;
  rms_v = sqrt(sum);

  //convert volts to amps
  //500 counts = 10.9 amps on channel 1
  if(rms_v<20){
    return 0;
  }
  else
    rms_a = 20.0/1000 * rms_v; //1000 mVRMS for 20 amps.
    return rms_a;
}





void loop() {
  ArduinoCloud.update();

  // Your code here 
  a0 = getRMSAmps(A0);
  a1 = getRMSAmps(A1);
  a2 = getRMSAmps(A2);

  pow0 = a0*115;
  pow1 = a1*115;
  pow2 = a2*115;
  
}




